language: c

sudo: required

dist: trusty

env:
  global:
    - OWROOT=$TRAVIS_BUILD_DIR
    - OWOBJDIR=binbuild
    - OWDOCBUILD=0
    - OWDOCQUIET=1
#    - OWUSE_FILENAME_VERSION=1
    - OWBRANCH=master
    - OWBRANCH_DOCS=documentation
    - OWBRANCH_COVERITY=coverity_scan
    - OWTRAVIS_REPO_SLUG=open-watcom/travis-ci-ow-builds
    - OWTRAVIS_BUILD_DIR=${HOME}/build/$OWTRAVIS_REPO_SLUG

cache:
  directories:
    - build/$OWOBJDIR
    - bld/watcom/$OWOBJDIR
    - test
    - build1

before_script:
 - travis/services.sh
 # get environment/cache info if debug active
 - travis/envinfo.sh
 - travis/cacheinf.sh

after_failure:
 # after failure transfer log files back to GitHub repository
 - travis/cacheinf.sh
 - travis/gitupdf.sh

after_success:
 # after success transfer OW build to GitHub repository
 - travis/cacheinf.sh
 - travis/gitupds.sh

jobs:
  allow_failures:
    - os: osx
  include:
    #################################
    - stage: Initialize
      name: "Initialize Travis GitHub repository"
      if: branch = env(OWBRANCH) AND type = push
      os: linux
      cache: false
      script: 
        - travis/tinit.sh
    #################################
    - stage: Bootstrap
      name: "Build minimal set of build tools"
      if: branch = env(OWBRANCH)
      os: linux
      compiler: gcc
      before_install:
        - export OWTOOLS=GCC
        - export OWTRAVISJOB=BOOTSTRAP
        - export OWDOCBUILD=0
        - export OWVERBOSE=1
        # clear cache
        - rm -f   build/$OWOBJDIR/*
        - rm -rf  bld/watcom/$OWOBJDIR/*
        - rm -rf  test/*
        - rm -rf  build1/*
      install:
        - . ./cmnvars.sh
      script: 
        - travis/build.sh
    - # ...
      name: "Build minimal set of build tools"
      if: branch = env(OWBRANCH) AND env(OWOSXBUILD) = 1
      os: osx
      compiler: clang
      before_install:
        - export OWTOOLS=CLANG
        - export OWTRAVISJOB=BOOTSTRAP
        - export OWDOCBUILD=0
        - export OWVERBOSE=1
        # clear cache
        - rm -f   build/$OWOBJDIR/*
        - rm -rf  bld/watcom/$OWOBJDIR/*
        - rm -rf  test/*
        - rm -rf  build1/*
      install:
        - . ./cmnvars.sh
      script: 
        - travis/build.sh
    #################################
    - stage: Build
      name: "OW tools build"
      if: branch = env(OWBRANCH)
      os: linux
      compiler: gcc
      before_install:
        - export OWTOOLS=GCC
        - export OWTRAVISJOB=BUILD
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
      install:
        # install DOS Emulator
        - sudo apt-get install -y dosemu
        - . ./cmnvars.sh
      script: 
        - travis/build.sh
    - # ...
      name: "OW tools OSX build 1"
      if: branch = env(OWBRANCH) AND env(OWOSXBUILD) = 1
      os: osx
      compiler: clang
      before_install:
        - export OWTOOLS=CLANG
        - export OWTRAVISJOB=BUILD1
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
      install:
        - . ./cmnvars.sh
      script: 
        - travis/build.sh
    #################################
    - stage: Build2
      name: "OW tools OSX build 2"
      if: branch = env(OWBRANCH) AND env(OWOSXBUILD) = 1
      os: osx
      compiler: clang
      before_install:
        - export OWTOOLS=CLANG
        - export OWTRAVISJOB=BUILD2
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
        - export OWDOSBOX=dosbox
      install:
        # install DOS Emulator
        - brew install dosbox
        - . ./cmnvars.sh
      script: 
        - travis/build.sh
    #################################
    - stage: Tests
      name: "Test wasm assembler"
      if: branch = env(OWBRANCH)
      os: linux
      before_install:
        - export OWTOOLS=WATCOM
        - export OWTRAVISJOB=TEST
        - export OWTRAVISTEST=WASM
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
      install:
        - export WATCOM=$OWROOT/test
        - export PATH=$WATCOM/binl:$PATH
        - export INCLUDE=$WATCOM/lh
        - unset LIB
        - . ./cmnvars.sh
      script: 
        - travis/test.sh
    - # ...
      name: "Test C compiler"
      if: branch = env(OWBRANCH)
      os: linux
      before_install:
        - export OWTOOLS=WATCOM
        - export OWTRAVISJOB=TEST
        - export OWTRAVISTEST=C
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
      install:
        - export WATCOM=$OWROOT/test
        - export PATH=$WATCOM/binl:$PATH
        - export INCLUDE=$WATCOM/lh
        - unset LIB
        - . ./cmnvars.sh
      script: 
        - travis/test.sh
    - # ...
      name: "Test FORTRAN 77 compiler"
      if: branch = env(OWBRANCH)
      os: linux
      before_install:
        - export OWTOOLS=WATCOM
        - export OWTRAVISJOB=TEST
        - export OWTRAVISTEST=F77
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
      install:
        - export WATCOM=$OWROOT/test
        - export PATH=$WATCOM/binl:$PATH
        - export INCLUDE=$WATCOM/lh
        - unset LIB
        - . ./cmnvars.sh
      script: 
        - travis/test.sh
    - # ...
      name: "Test C++ compiler"
      if: branch = env(OWBRANCH)
      os: linux
      before_install:
        - export OWTOOLS=WATCOM
        - export OWTRAVISJOB=TEST
        - export OWTRAVISTEST=CXX
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
      install:
        - export WATCOM=$OWROOT/test
        - export PATH=$WATCOM/binl:$PATH
        - export INCLUDE=$WATCOM/lh
        - unset LIB
        - . ./cmnvars.sh
      script: 
        - travis/test.sh
    - # ...
      name: "Test C run-time library"
      if: branch = env(OWBRANCH)
      os: linux
      before_install:
        - export OWTOOLS=WATCOM
        - export OWTRAVISJOB=TEST
        - export OWTRAVISTEST=CRTL
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
      install:
        - export WATCOM=$OWROOT/test
        - export PATH=$WATCOM/binl:$PATH
        - export INCLUDE=$WATCOM/lh
        - unset LIB
        - . ./cmnvars.sh
      script: 
        - travis/test.sh
    #################################
    - stage: Finalize
      name: "Clean build cache Linux"
      if: branch = env(OWBRANCH)
      os: linux
      script: 
        # clear cache
        - rm -f   build/$OWOBJDIR/*
        - rm -rf  bld/watcom/$OWOBJDIR/*
        - rm -rf  test/*
        - rm -rf  build1/*
    - # ...
      name: "Clean build cache OSX"
      if: branch = env(OWBRANCH) AND env(OWOSXBUILD) = 1
      os: osx
      script: 
        # clear cache
        - rm -f   build/$OWOBJDIR/*
        - rm -rf  bld/watcom/$OWOBJDIR/*
        - rm -rf  test/*
        - rm -rf  build1/*

    #################################
    - stage: InitDocumentation
      name: "Initiate Documentation build by Cron"
      if: branch = env(OWBRANCH_DOCS) AND type = cron
      os: linux
      cache: false
      script: 
        - travis/gitudocs.sh
    #################################
    - stage: Documentation
      name: "OW Documentation build"
      if: branch = env(OWBRANCH_DOCS) AND type = push
      os: linux
      compiler: gcc
      cache: false
      before_install:
        - export OWTOOLS=GCC
        - export OWTRAVISJOB=DOCPDF
        - export OWDOCBUILD=1
        - export OWVERBOSE=0
      install:
        # install DOS Emulator + Ghostscript
        - sudo apt-get install -y dosemu ghostscript
        - export OWGHOSTSCRIPTPATH=$PATH
        - . ./cmnvars.sh
      script: 
        - travis/builddoc.sh
    #################################
    - stage: InitCoverity
      name: "Initiate Coverity Scan by Cron"
      if: branch = env(OWBRANCH_COVERITY) AND type = cron
      os: linux
      cache: false
      script: 
        - travis/gitucov.sh
    #################################
    - stage: Coverity
<<<<<<< HEAD
      name: "Run Coverity Scan processing"
      if: branch = coverity_scan AND type = push
=======
      name: "Initiate Coverity Scan"
      if: branch = env(OWBRANCH_COVERITY) AND type = push
>>>>>>> master
      os: linux
      compiler: gcc
      cache: false
      before_install:
        - export OWTOOLS=GCC
        - export OWTRAVISJOB=BUILD
        - export OWDOCBUILD=0
        - export OWVERBOSE=0
      install:
        # install DOS Emulator
        - sudo apt-get install -y dosemu
        - . ./cmnvars.sh
      script: 
        - travis/covscan.sh

#  coverity_scan:
#    project:
#      name: "$TRAVIS_REPO_SLUG"
#      description: "Build submitted via Travis CI"
#    notification_email:    "malak.jiri@gmail.com"
#    build_command_prepend:
#    build_command:         "travis/build.sh scan"
#    branch_pattern:        coverity_scan
